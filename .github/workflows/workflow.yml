name: Build and Test

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [aarch64, x86_64]  # 定义 matrix 架构

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Check Docker credentials
      run: |
        if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
          echo "DOCKER_USERNAME is not set"
        exit 1
        fi
        if [ -z "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "DOCKERHUB_TOKEN is not set"
        exit 1
        fi
        echo "DOCKER_USERNAME and DOCKER_PASSWORD are set"

    - name: Log into registry
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: echo "${DOCKER_PASSWORD}" | docker login --username ${DOCKER_USERNAME} --password-stdin

    - name: Build and push multi-architecture image
      run: |
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --build-arg ARCH=${{ matrix.architecture }} \
          --file Dockerfile \
          --tag szqhan/smartdns:${{ matrix.architecture }} \
          . \
          --push
          
    - name: Verify image architecture
      run: |
        image_tag="smartdns:${{ matrix.architecture }}"
        # 定义架构名称映射
        declare -A arch_map
        arch_map["x86_64"]="amd64"
        arch_map["aarch64"]="arm64"
        # 获取期望的架构，并进行映射
        expected_arch="${{ matrix.architecture }}" 
        if [[ ${arch_map[$expected_arch]} ]]; then
          expected_arch=${arch_map[$expected_arch]}
        fi
        # 使用 docker inspect 验证架构 (方法一)
        actual_arch=$(docker inspect --format='{{.Architecture}}' "$image_tag")
        if [ "$actual_arch" = "$expected_arch" ]; then
          echo "镜像架构验证成功：$actual_arch"
        else
          echo "镜像架构验证失败！期望：$expected_arch, 实际：$actual_arch"
          exit 1
        fi


